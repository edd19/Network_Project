#!/usr/bin/expect


# variable definition
set timeout 10.0

#Routers addresses
set E1 "192.168.0.1"
set E2 "192.168.0.2"
set E3 "192.168.0.3"
set C1 "192.168.0.4"
set C2 "192.168.0.5"
set C3 "192.168.0.6"
set ext2 "192.168.2.1"
set ext3 "192.168.3.1"
set ext4 "192.168.4.1"
array set routers {"192.168.0.1"  "192.168.0.2" "192.168.0.3" "192.168.0.4" "192.168.0.5" "192.168.0.6" "192.168.2.1" "192.168.2.2"}
set mylist {}
lappend mylist $E1
lappend mylist $E2
lappend mylist $E3
lappend mylist $C1
lappend mylist $C3
lappend mylist $ext2
lappend mylist $ext3
lappend mylist $ext4


set my_password "cisco"

################CHECK IF C1 IS WELL CONFIGURED
set cli_line "C2>"
set cli_line2 "#"
set address "172.16.11.254"
set port "17014"


# open a telnet session to a remote server, and wait for a username prompt.
spawn telnet $address $port
expect "'^]'."
sleep 2;
#send \0366;

send "\r";

#send "exit\r"



# wait for a shell prompt, then go to enable mode. If a timeout is reached, prompt an error and exit.
expect {
    "$cli_line" {send "enable\r"}
    timeout {
        puts "\rERROR: password failed!\r"
        exp_close
    }
}

# the password is the next thing to be asked in return to the telnet connection.
expect "Password:"
send "$my_password\r"



#Send trace to all routers.
foreach elem $mylist {
    expect {
        "#" {
            send "trace $elem\r"
        }
        timout {
            puts "\rERROR: trace failed!\r"
        }
    }
}

sleep 3
puts "\rTrace end\r"


expect -re ".*#" {send "exit\r"}



# exit the telnet session, and wait for the end-of-file char.
send "exit\r"
#expect eof

# print the output of the results variable
#puts "\r"
#puts "printing results:\r"
#puts $results
#puts "\r"
